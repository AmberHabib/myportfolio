import os
cur_path = os.getcwd()
level_down = os.path.split(cur_path)
import os
cur_path = os.getcwd()
level_down = os.path.split(cur_path)
level_down
import os
cur_path = os.getcwd()
level_down = os.path.split(cur_path)
print(level_down)
import os
cur_path = os.getcwd()
level_down = os.path.split(cur_path)
print(level_down)
import os
cur_path = os.getcwd()
level_down = os.path.split(cur_path)
directory = level_down[0]+'/religious_history_project_work'
print(directory)
eda_data = pd.read_csv(directory+'/religion_data_for_EDA.csv',index_col=0)
eda_data = pd.DataFrame(eda_data)
#eda_data.dropna(axis=0, inplace=True)
eda_data[eda_data['CurrentRegion'].isna()]
import pandas as pd
import re
import plotly.express as px
import plotly.graph_objects as go
import pandas as pd
import re
import plotly.express as px
import plotly.graph_objects as go
import os
cur_path = os.getcwd()
level_down = os.path.split(cur_path)
directory = level_down[0]+'/religious_history_project_work'
print(directory)
eda_data = pd.read_csv(directory+'/religion_data_for_EDA.csv',index_col=0)
eda_data = pd.DataFrame(eda_data)
#eda_data.dropna(axis=0, inplace=True)
eda_data[eda_data['CurrentRegion'].isna()]
# drop rows with na for the location data
# these are only the groups
#for which the original source identified the location as being (global, cybersect, transnational, international)
rows_to_drop = eda_data[eda_data['CurrentRegion'].isna()]
eda_data = eda_data.drop(rows_to_drop.index, axis = 0)
# drop rows with na for the location data
# these are only the groups
#for which the original source identified the location as being (global, cybersect, transnational, international)
rows_to_drop = eda_data[eda_data['CurrentRegion'].isna()]
eda_data = eda_data.drop(rows_to_drop.index, axis = 0)
eda_data.loc[[2362,2363,2364], 'Latitude'] = -22.735910
eda_data.loc[[2362,2363,2364], 'Longitude'] = 140.018765
counts = eda_data['Continent'].value_counts()
eda_data['count_by_continent'] = eda_data['Continent'].map(counts)
counts_region = eda_data['CurrentRegion'].value_counts()
eda_data['count_by_region'] = eda_data['CurrentRegion'].map(counts_region)
fig = px.scatter_mapbox( eda_data, lat = "Latitude", lon = "Longitude",
hover_name="Name",
color="Continent",
size="count_by_region",
zoom=1,center = {"lat": 26.820553, "lon": 30.802498}, height=600)
fig.update_layout(mapbox_style="carto-positron")
fig.update_layout(margin={"r":0,"t":0,"l":0,"b":0})
fig.show()
# drop rows with na for the location data
# these are only the groups
#for which the original source identified the location as being (global, cybersect, transnational, international)
rows_to_drop = eda_data[eda_data['CurrentRegion'].isna()]
eda_data = eda_data.drop(rows_to_drop.index, axis = 0)
eda_data.loc[[2362,2363,2364], 'Latitude'] = -22.735910
eda_data.loc[[2362,2363,2364], 'Longitude'] = 140.018765
counts = eda_data['Continent'].value_counts()
eda_data['count_by_continent'] = eda_data['Continent'].map(counts)
counts_region = eda_data['CurrentRegion'].value_counts()
eda_data['count_by_region'] = eda_data['CurrentRegion'].map(counts_region)
fig = px.scatter_mapbox( eda_data, lat = "Latitude", lon = "Longitude",
hover_name="Name",
color="Continent",
size="count_by_region",
zoom=1,center = {"lat": 26.820553, "lon": 30.802498}, height=600)
fig.update_layout(mapbox_style="carto-positron")
fig.update_layout(margin={"r":0,"t":0,"l":0,"b":0})
fig.write_html("test.html")
url = 'test.html'
webbrowser.open(url, new=2)
import pandas as pd
import re
import plotly.express as px
import plotly.graph_objects as go
import webbrowser
# drop rows with na for the location data
# these are only the groups
#for which the original source identified the location as being (global, cybersect, transnational, international)
rows_to_drop = eda_data[eda_data['CurrentRegion'].isna()]
eda_data = eda_data.drop(rows_to_drop.index, axis = 0)
eda_data.loc[[2362,2363,2364], 'Latitude'] = -22.735910
eda_data.loc[[2362,2363,2364], 'Longitude'] = 140.018765
counts = eda_data['Continent'].value_counts()
eda_data['count_by_continent'] = eda_data['Continent'].map(counts)
counts_region = eda_data['CurrentRegion'].value_counts()
eda_data['count_by_region'] = eda_data['CurrentRegion'].map(counts_region)
fig = px.scatter_mapbox( eda_data, lat = "Latitude", lon = "Longitude",
hover_name="Name",
color="Continent",
size="count_by_region",
zoom=1,center = {"lat": 26.820553, "lon": 30.802498}, height=600)
fig.update_layout(mapbox_style="carto-positron")
fig.update_layout(margin={"r":0,"t":0,"l":0,"b":0})
fig.write_html("test.html")
url = 'test.html'
webbrowser.open(url, new=2)
# drop rows with na for the location data
# these are only the groups
#for which the original source identified the location as being (global, cybersect, transnational, international)
rows_to_drop = eda_data[eda_data['CurrentRegion'].isna()]
eda_data = eda_data.drop(rows_to_drop.index, axis = 0)
eda_data.loc[[2362,2363,2364], 'Latitude'] = -22.735910
eda_data.loc[[2362,2363,2364], 'Longitude'] = 140.018765
counts = eda_data['Continent'].value_counts()
eda_data['count_by_continent'] = eda_data['Continent'].map(counts)
counts_region = eda_data['CurrentRegion'].value_counts()
eda_data['count_by_region'] = eda_data['CurrentRegion'].map(counts_region)
fig = px.scatter_mapbox( eda_data, lat = "Latitude", lon = "Longitude",
hover_name="Name",
color="Continent",
size="count_by_region",
zoom=1,center = {"lat": 26.820553, "lon": 30.802498}, height=600)
fig.update_layout(mapbox_style="carto-positron")
fig.update_layout(margin={"r":0,"t":0,"l":0,"b":0})
#fig.write_html("test.html")
#url = 'test.html'
#webbrowser.open(url, new=2)
# Output html that you can copy paste
fig.to_html(full_html=False, include_plotlyjs='cdn')
# Saves a html doc that you can copy paste
fig.write_html("output.html", full_html=False, include_plotlyjs='cdn')
reticulate::repl_python()
rmarkdown::render_site()
rmarkdown::render_site()
setwd("~/projects/myportfolio")
rmarkdown::render_site()
knitr::opts_chunk$set(echo = TRUE,warning = FALSE, message = FALSE)
library(htmltools)
rmarkdown::render_site()
rmarkdown::render_site()
install.packages("gifski")
